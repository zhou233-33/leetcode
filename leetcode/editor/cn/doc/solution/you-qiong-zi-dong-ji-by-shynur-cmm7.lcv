> [10. 正则表达式匹配](https://leetcode.cn/problems/regular-expression-matching/description) <br> 因为[女朋友](https://leetcode.cn/u/ai-shi-ling-e)问过这题, 所以亲自来写一下.

可以证明 *正则表达式* 等价于 *有穷自动机*.

以 模式串 `c.*ab*` 为例, 构造出如下 NFA (不确定有穷自动机):

* 

```
                  +-----无条件转移----+
                  |                 |
                  v                 |
-> [Init] -c-> [状态1] -任意字母-> [状态2]
                  |
              无条件转移         +--无条件转移-+
                  |            |            |
                  v            v            |
               [状态3] -a-> [状态4] -b-> [状态5]
                               |
                          无条件转移
                               |
                               v
                          [Accepted]
```

当 NFA 读取输入 `cca` 时, 存在一条路径到达终点: <br> `Init -> 状态1 -> 状态2 -> 状态1 -> 状态3 -> 状态4 -> Accepted`

实际上, 所有能够匹配给定的模式串的文本, 都能找到一条达到终点的路径;
像 `c` 这样不匹配的文本, 如果被 NFA 读取, 则只能停留在 `状态1` 或 `状态3`, 无法继续前进.

___

1. 构造 NFA.
2. 定义函数 `get_epsilon_closure`.  它
   - 接受: 一个 NFA 状态节点的集合;
   - 返回: 从这些节点出发, 可以无条件转移到的所有节点的集合.
     例如, 输入 `{状态2}`, 返回 `{状态2, 状态1, 状态3}`.
3. 从 `当前状态集 := get_epsilon_closure({Init})` 出发.
   1. 从输入文本中读取一个字符 `char`.
   2. 查看 `当前状态集` 中的每个状态节点 `node`:
      如果 `node` 能经过 `char` 直接转移到下一个节点 `next_node`, 就将 `next_node` 添加到 `新状态集` 中.
   3. 令 `当前状态集 = get_epsilon_closure(新状态集)`.
4. 如果读取完整个文本之后, `Accepted` 属于 `当前状态集`, 则匹配成功.

* []

```JavaScript
function isMatch(str, regexp) {
    'use strict'

    const NFA_init = new Map
    let current_node = NFA_init, node_before_star
    for (const ch of regexp) {
        const NFA_next_node = new Map
        switch (ch) {
            case '.':
                for (const i of [...Array(26).keys()])
                    current_node.set(String.fromCharCode(0x61 + i), NFA_next_node)
                break
            case '*':
                current_node.set(null, node_before_star)
                node_before_star.set(null, NFA_next_node)
                break
            default:
                current_node.set(ch, NFA_next_node)
        }
        [node_before_star, current_node] = [current_node, NFA_next_node]
    }
    const NFA_ac = current_node

    function get_epsilon_closure(...NFA_nodes) {
        const epsilon_closure = new Set(NFA_nodes)
        while (true) {
            const num_nodes = epsilon_closure.size
            for (const node of epsilon_closure)
                for (const [edge, next_node] of node)
                    if (edge === null)
                        epsilon_closure.add(next_node)
            if (epsilon_closure.size === num_nodes)
                return epsilon_closure
        }
    }

    let current_nodes = get_epsilon_closure(NFA_init)
    for (const ch of str) {
        console.log(current_nodes)
        const next_nodes = new Set
        for (const node of current_nodes)
            if (node.has(ch))
                next_nodes.add(node.get(ch))
        current_nodes = get_epsilon_closure(...next_nodes)
    }
    console.log(current_nodes)
    return current_nodes.has(NFA_ac)
}
```

