### 解题思路

用回溯算法实现正则表达式的匹配
1. 如果表达式和字符串均已匹配完成，则返回true，表示匹配成功。
2. 如果字符串未匹配完成，但表达式已经匹配完成，则返回false，表示匹配失败。
3. 如果表达式的下一个字符是'*'，则有两种情况需要考虑：
   * 第一种情况：'*'表示0个字符匹配，此时继续匹配表达式的下一个字符。
   * 第二种情况：'*'表示多个字符匹配，此时遍历字符串，判断是否匹配表达式的当前字符，如果匹配成功，继续匹配后面的字符。
4. 如果表达式的下一个字符不是'*'，则只需判断当前字符是否匹配，并继续匹配后面的字符。
   该算法的时间复杂度为O((len(s) + len(p))^2)，空间复杂度为O(len(s) + len(p))，其中len(s)和len(p)分别表示字符串s和表达式p的长度。
   可惜太慢了，内存消耗倒是不是特别大

### 代码

* golang

```golang
func isMatch(s string, p string) bool {
    return match(s, p, 0, 0)
}
 func match(s, p string, si, pi int) bool {
    if si == len(s) && pi == len(p) { // 表达式和字符串均匹配完成
        return true
    }
    if si < len(s) && pi == len(p) { // 如果字符串未匹配完成，但是表达式已经匹配完成，返回false
        return false
    }
    if pi < len(p)-1 && p[pi+1] == '*' { // 如果表达式的下一个字符是'*'，则有两种情况：'*'表示0个字符匹配，或者'*'表示多个字符匹配
        // 第一种情况：'*'表示0个字符匹配，继续匹配表达式的下一个字符
        if match(s, p, si, pi+2) {
            return true
        }
        // 第二种情况：'*'表示多个字符匹配
        for si < len(s) && (p[pi] == '.' || s[si] == p[pi]) {
            if match(s, p, si+1, pi+2) {
                return true
            }
            si++
        }
    } else { // 如果表达式的下一个字符不是'*'，则只需判断当前字符是否匹配，并继续匹配后面的字符
        if si < len(s) && (p[pi] == '.' || s[si] == p[pi]) {
            return match(s, p, si+1, pi+1)
        }
    }
    return false
}
```

